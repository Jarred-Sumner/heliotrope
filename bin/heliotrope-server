#!/usr/bin/env ruby

require 'rubygems'
require 'json'
require 'trollop'
require 'sinatra/base'
require 'whistlepig'
require "heliotrope"
require 'cgi'

$opts = Trollop::options do
  banner <<EOS
Usage: #{$0} [options]

Where options include:
EOS
  opt :host, "Host interface to listen on", :default => "0.0.0.0", :short => "-H"
  opt :port, "Port to listen on", :default => 8042
  opt :dir, "Base directory for all index files", :default => "."
end

$store = Heliotrope::Store.new $opts.dir
$mbox = File.open(File.join($opts.dir, "mbox"), "a+:BINARY")
$search_state = [] # hold on to the last search so that we can resume when possible

class HeliotropeServer < Sinatra::Base
  set :host, $opts.host
  set :port, $opts.port

  helpers do
    include Rack::Utils
  end

  get "/" do
    redirect "/search?q=~inbox"
  end

  class RequestError < StandardError; end

  error RequestError do
    e = request.env['sinatra.error']
    "error: " + e.message
  end

  DEFAULT_SEARCH_PAGE_SIZE = 20
  MAX_SEARCH_PAGE_SIZE = 300

  post "/message" do
    content_type :json

    begin
      rawbody = params["message"] or raise RequestError, "need a message"
      rawbody.force_encoding "binary" if rawbody.respond_to?(:force_encoding) # sigh...

      message = Heliotrope::Message.new(rawbody).parse!

      if $store.contains_msgid? message.msgid
        puts "; already seen #{message.msgid}"
        { :response => :ok, :status => :seen }
      else
        $mbox.seek 0, IO::SEEK_END
        $mbox.puts "From heliotrope@masanjin.net #{Time.now.localtime}" # just to make it an mbox
        offset = $mbox.tell
        $mbox.print rawbody
        $mbox.flush
        doc_id, thread_id = $store.add_message message, %w(unread), %w(inbox), :offset => offset, :size => rawbody.size
        { :response => :ok, :status => :unseen, :doc_id => doc_id, :thread_id => thread_id }
      end
    rescue Heliotrope::InvalidMessageError => e
      { :response => :error, :error_message => e.message }
    end.to_json
  end

  get "/search" do
    content_type :html

    ## work around a rack (?) bug where quotes are omitted in queries like "hello bob"
    query = if env["rack.request.query_string"] =~ /\bq=(.+?)(&|$)/
      CGI.unescape $1
    else
      params["q"]
    end

    raise RequestError, "need a query" unless query
    start = (params["start"] || 0).to_i
    num = (params["num"] || DEFAULT_SEARCH_PAGE_SIZE).to_i
    num = DEFAULT_SEARCH_PAGE_SIZE if num <= 0
    num = [num, MAX_SEARCH_PAGE_SIZE].min

    begin
      query = Heliotrope::Query.new "body", query
      startt = Time.now
      continued = false
      results = if $search_state == [query.parsed_query_s, start]
        continued = true
        $store.get_some_results num
      else
        $store.set_query query
        $store.get_some_results(start + num)[start, num]
      end
      elapsed = Time.now - startt

      $search_state = [query.parsed_query_s, start + num]

      nav = %{<div style="padding-top: 1em">}
      if start > 0
        nav += link_to_search(query.original_query_s, "<< top", 0, num) + "|" + link_to_search(query.original_query_s, "<< previous", [start - num, 0].max, num)
      end
      if (start > 0) && (results.size == num)
        nav += "|"
      end
      if results.size == num
        nav += link_to_search(query.original_query_s, "next >>", start + num, num)
      end
      nav += "</div>"

      header("Search: #{query.original_query_s}", query.original_query_s) +
        "<div>Parsed query: #{escape_html query.parsed_query_s}</div>" +
        "<div>Search took #{sprintf '%.2f', elapsed}s and #{continued ? 'was' : 'was NOT'} continued</div>" +
        "#{nav}<table>" +
        results.map { |r| threadinfo_to_html r }.join +
        "</table>#{nav}" + footer

    rescue Heliotrope::Query::ParseError => e
      raise RequestError, "can't parse query: #{e.message}"
    end
  end

  get "/thread/:thread_id" do |thread_id|
    content_type :html
    thread_id = thread_id.to_i
    messageinfos = $store.load_thread_messageinfos(thread_id) or raise RequestError, "can't find thread #{thread_id.inspect}"
    first = messageinfos.find { |mi, level| mi[:subject] }[0]

    header("Thread: " + first[:subject]) +
      messageinfos.map do |mi, level|
        %{<div style="padding-left: #{level}em">} +
          messageinfo_to_html(mi) +
          "</div>"
      end.join +
      footer
  end

  get "/message/:message_id" do |message_id|
    content_type :html
    message_id = message_id.to_i
    message = $store.load_messageinfo(message_id) or raise RequestError, "can't find message #{message_id.inspect}"

    begin
      threadinfo = $store.load_threadinfo(message[:thread_id])
      docids = threadinfo[:structure].flatten
      idx = docids.index(message_id) + 1
      idx += 1 while(docids[idx] && (docids[idx] < 0))
      header(message[:subject]) + message_to_html(message, docids[idx]) + footer
    rescue Heliotrope::InvalidMessageError => e
      raise RequestError, "can't parse message #{message_id.inspect}: #{e.message}"
    end
  end

  get "/message/:message_id/part/:part_id" do |message_id, part_id|
    message_id = message_id.to_i
    part_id = part_id.to_i
    message = $store.load_messageinfo(message_id) or raise RequestError, "can't find message #{message_id.inspect}"

    begin
      $mbox.seek message[:offset]
      rawbody = $mbox.read message[:size]
      m = Heliotrope::Message.new(rawbody).parse!
      parts = m.mime_parts "text/html"

      raise RequestError, "can't find that part" unless part_id >= 0 && part_id <= parts.size
      type, fn, content = parts[part_id]
      if type =~ /^(\S+?);/
        type = $1
      end
      content_type type
      response['Content-Disposition'] = (type =~ /^(text|image)\// ? "inline" : "attachment")
      response['Content-Disposition'] << %{; filename="#{fn}"} if fn
      content
    rescue Heliotrope::InvalidMessageError => e
      raise RequestError, "can't parse message #{message_id.inspect}: #{e.message}"
    end
  end

private

  def message_to_html message, next_messageid
    $mbox.seek message[:offset]
    rawbody = $mbox.read message[:size]
    m = Heliotrope::Message.new(rawbody).parse!

    s = "<div>#{link_to_threadview message[:thread_id], "<< back to thread"}"
    s += " | #{link_to_messageview next_messageid, "next message in thread >>"}" if next_messageid
    s += "</div>"
    s += %{<div style="padding-top: 1em">From: #{link_to_search m.from.email, m.from}</div>}
    s += "<div>To: #{m.to.map { |p| link_to_search p.email, p }.join(", ")}</div>"
    s += "<div>Cc: #{m.cc.map { |p| link_to_search p.email, p }.join(", ")}</div>" unless m.cc.empty?
    s += "<div>Bcc: #{m.bcc.map { |p| link_to_search p.email, p }.join(", ")}</div>" unless m.bcc.empty?
    s += "<div>Date: #{Time.at m.date}</div>"
    s += "<div>Subject: #{escape_html m.subject}</div>"
    m.mime_parts("text/html").each_with_index do |(type, fn, content), i|
      s += %{<div style="padding-top: 1em">}
      if fn
        s += link_to_attachment message[:message_id], i, "[attachment: #{fn} (#{type})]"
        if type =~ /^image\// # show a preview
          s += inline_image(message[:message_id], i)
        end
      else
        s += make_html type, content
      end
    end

    #store.update_message_state(message[:message_id], (message[:state] - ["unread"]))
    s
  end

  def make_html type, content
    case type
    when /^text\/html/; content
    when /^text\/plain/; escape_html(content).gsub("\n", "<br/>")
    else escape_html(content)
    end
  end

  MAX_PARTICIPANT_WIDTH = 40
  MAX_SUBJECT_WIDTH = 50

  def threadinfo_to_html thread
    pwidth = 0
    participants = thread[:participants].
      map { |v| Heliotrope::Person.from_string v }.
      take_while do |p|
        pwidth += p.display_name.length
        pwidth < MAX_PARTICIPANT_WIDTH
      end.
      map { |p| link_to_search p.email, p.display_name }.
      join(", ")

    size = thread[:size]
    labels = (thread[:labels] - Heliotrope::Store::MESSAGE_STATE).map do |l|
      link_to_search "~#{l}", "+#{l}"
    end.join(" ")

    subject = link_to_threadview thread[:thread_id], thread[:subject][0, MAX_SUBJECT_WIDTH]

    date = escape_html Time.at(thread[:date]).strftime("%Y/%m/%d %H:%M")

    flags = escape_html(
      (thread[:state].include?("starred") ? "*" : " ") +
      (thread[:state].include?("unread") ? "N" : " ") +
      (thread[:state].include?("attachment") ? "@" : " ")
    )

    <<-EOS
<tr>
  <td>#{flags}</td>
  <td>#{participants}</td>
  <td>#{size}</td>
  <td>#{labels} #{subject}</td>
  <td>#{date}</td>
</tr>
    EOS
  end

  def messageinfo_to_html message
    if message[:type] == "fake" # fake root
      "<td>(an unreceived message)</td>"
    else
      from = Heliotrope::Person.from_string message[:from]
      flags =
        (message[:state].include?("starred") ? "*" : " ") +
        (message[:state].include?("unread") ? "N" : " ") +
        (message[:state].include?("attachment") ? "@" : " ")
      date = escape_html Time.at(message[:date]).strftime("%Y/%m/%d %H:%M")
      subject = link_to_messageview message[:message_id], message[:subject]

      <<-EOS
  <span>#{flags}</span>
  <span>#{link_to_search from.email, from.display_name}</span>
  <span>#{link_to_messageview message[:message_id], message[:subject]}</span>
  <span>#{date}</span>
      EOS
    end
  end

  def link_to_search query, text, start=0, num=DEFAULT_SEARCH_PAGE_SIZE
    %{<a href="/search?q=#{CGI.escape query}&start=#{start}&num=#{num}">#{escape_html text}</a>}
  end

  def link_to_threadview thread_id, text
    %{<a href="/thread/#{thread_id}">#{escape_html text}</a>}
  end

  def link_to_messageview message_id, text
    %{<a href="/message/#{message_id}">#{escape_html text}</a>}
  end

  def link_to_attachment message_id, part_id, text
    %{<a href="/message/#{message_id}/part/#{part_id}">#{escape_html text}</a>}
  end

  def inline_image message_id, part_id
    %{<img src="/message/#{message_id}/part/#{part_id}">}
  end

  def header title, query=""
    title = escape_html title
    <<-EOS
<!DOCTYPE html><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>Heliotrope: #{title}</title>
<meta name="application-name" content="heliotrope"></head><body><h1>#{title}</h1>
<div>
<form method="get" action="/search">
  #{link_to_search "~inbox", "[inbox]"}
  Search: <input name="q" size=50 value="#{escape_html query}"/>
  <input type="submit" value="go"/>
  </form></div>
    EOS
  end

  def footer
    "</body></html>"
  end
end

HeliotropeServer.run!
