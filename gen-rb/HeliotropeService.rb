#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'thrift/protocol'
require File.dirname(__FILE__) + '/heliotrope_types'

    module Heliotrope
      module HeliotropeService
        class Client
          include Thrift::Client

          def search(tree_type, query, start, offset, params)
            send_search(tree_type, query, start, offset, params)
            return recv_search()
          end

          def send_search(tree_type, query, start, offset, params)
            send_message('search', Search_args, :tree_type => tree_type, :query => query, :start => start, :offset => offset, :params => params)
          end

          def recv_search()
            result = receive_message(Search_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise Thrift::ApplicationException.new(Thrift::ApplicationException::MISSING_RESULT, 'search failed: unknown result')
          end

          def search_size(tree_type, query, params)
            send_search_size(tree_type, query, params)
            return recv_search_size()
          end

          def send_search_size(tree_type, query, params)
            send_message('search_size', Search_size_args, :tree_type => tree_type, :query => query, :params => params)
          end

          def recv_search_size()
            result = receive_message(Search_size_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise Thrift::ApplicationException.new(Thrift::ApplicationException::MISSING_RESULT, 'search_size failed: unknown result')
          end

          def get_document(doc_id)
            send_get_document(doc_id)
            return recv_get_document()
          end

          def send_get_document(doc_id)
            send_message('get_document', Get_document_args, :doc_id => doc_id)
          end

          def recv_get_document()
            result = receive_message(Get_document_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise result.nsi unless result.nsi.nil?
            raise Thrift::ApplicationException.new(Thrift::ApplicationException::MISSING_RESULT, 'get_document failed: unknown result')
          end

          def get_tree(doc_id)
            send_get_tree(doc_id)
            return recv_get_tree()
          end

          def send_get_tree(doc_id)
            send_message('get_tree', Get_tree_args, :doc_id => doc_id)
          end

          def recv_get_tree()
            result = receive_message(Get_tree_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise result.nsi unless result.nsi.nil?
            raise Thrift::ApplicationException.new(Thrift::ApplicationException::MISSING_RESULT, 'get_tree failed: unknown result')
          end

          def get_trees_rooted_at_doc(doc_id, tree_type)
            send_get_trees_rooted_at_doc(doc_id, tree_type)
            return recv_get_trees_rooted_at_doc()
          end

          def send_get_trees_rooted_at_doc(doc_id, tree_type)
            send_message('get_trees_rooted_at_doc', Get_trees_rooted_at_doc_args, :doc_id => doc_id, :tree_type => tree_type)
          end

          def recv_get_trees_rooted_at_doc()
            result = receive_message(Get_trees_rooted_at_doc_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise result.nsi unless result.nsi.nil?
            raise Thrift::ApplicationException.new(Thrift::ApplicationException::MISSING_RESULT, 'get_trees_rooted_at_doc failed: unknown result')
          end

          def get_document_body(doc_id, start, offset)
            send_get_document_body(doc_id, start, offset)
            return recv_get_document_body()
          end

          def send_get_document_body(doc_id, start, offset)
            send_message('get_document_body', Get_document_body_args, :doc_id => doc_id, :start => start, :offset => offset)
          end

          def recv_get_document_body()
            result = receive_message(Get_document_body_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise result.nsi unless result.nsi.nil?
            raise Thrift::ApplicationException.new(Thrift::ApplicationException::MISSING_RESULT, 'get_document_body failed: unknown result')
          end

          def update_document_metadata(doc_id, updates)
            send_update_document_metadata(doc_id, updates)
            return recv_update_document_metadata()
          end

          def send_update_document_metadata(doc_id, updates)
            send_message('update_document_metadata', Update_document_metadata_args, :doc_id => doc_id, :updates => updates)
          end

          def recv_update_document_metadata()
            result = receive_message(Update_document_metadata_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise result.nsi unless result.nsi.nil?
            raise Thrift::ApplicationException.new(Thrift::ApplicationException::MISSING_RESULT, 'update_document_metadata failed: unknown result')
          end

          def add_documents(o)
            send_add_documents(o)
            return recv_add_documents()
          end

          def send_add_documents(o)
            send_message('add_documents', Add_documents_args, :o => o)
          end

          def recv_add_documents()
            result = receive_message(Add_documents_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise Thrift::ApplicationException.new(Thrift::ApplicationException::MISSING_RESULT, 'add_documents failed: unknown result')
          end

          def attach_as_child(tree_type, parent_doc_id, child_doc_id)
            send_attach_as_child(tree_type, parent_doc_id, child_doc_id)
            recv_attach_as_child()
          end

          def send_attach_as_child(tree_type, parent_doc_id, child_doc_id)
            send_message('attach_as_child', Attach_as_child_args, :tree_type => tree_type, :parent_doc_id => parent_doc_id, :child_doc_id => child_doc_id)
          end

          def recv_attach_as_child()
            result = receive_message(Attach_as_child_result)
            raise result.e unless result.e.nil?
            raise result.nsi unless result.nsi.nil?
            return
          end

          def detach_as_child(tree_type, parent_doc_id, child_doc_id)
            send_detach_as_child(tree_type, parent_doc_id, child_doc_id)
            recv_detach_as_child()
          end

          def send_detach_as_child(tree_type, parent_doc_id, child_doc_id)
            send_message('detach_as_child', Detach_as_child_args, :tree_type => tree_type, :parent_doc_id => parent_doc_id, :child_doc_id => child_doc_id)
          end

          def recv_detach_as_child()
            result = receive_message(Detach_as_child_result)
            raise result.e unless result.e.nil?
            raise result.nsi unless result.nsi.nil?
            raise result.nac unless result.nac.nil?
            return
          end

        end

        class Processor
          include Thrift::Processor

          def process_search(seqid, iprot, oprot)
            args = read_args(iprot, Search_args)
            result = Search_result.new()
            begin
              result.success = @handler.search(args.tree_type, args.query, args.start, args.offset, args.params)
            rescue GeneralError => e
              result.e = e
            end
            write_result(result, oprot, 'search', seqid)
          end

          def process_search_size(seqid, iprot, oprot)
            args = read_args(iprot, Search_size_args)
            result = Search_size_result.new()
            begin
              result.success = @handler.search_size(args.tree_type, args.query, args.params)
            rescue GeneralError => e
              result.e = e
            end
            write_result(result, oprot, 'search_size', seqid)
          end

          def process_get_document(seqid, iprot, oprot)
            args = read_args(iprot, Get_document_args)
            result = Get_document_result.new()
            begin
              result.success = @handler.get_document(args.doc_id)
            rescue GeneralError => e
              result.e = e
            rescue NoSuchIdError => nsi
              result.nsi = nsi
            end
            write_result(result, oprot, 'get_document', seqid)
          end

          def process_get_tree(seqid, iprot, oprot)
            args = read_args(iprot, Get_tree_args)
            result = Get_tree_result.new()
            begin
              result.success = @handler.get_tree(args.doc_id)
            rescue GeneralError => e
              result.e = e
            rescue NoSuchIdError => nsi
              result.nsi = nsi
            end
            write_result(result, oprot, 'get_tree', seqid)
          end

          def process_get_trees_rooted_at_doc(seqid, iprot, oprot)
            args = read_args(iprot, Get_trees_rooted_at_doc_args)
            result = Get_trees_rooted_at_doc_result.new()
            begin
              result.success = @handler.get_trees_rooted_at_doc(args.doc_id, args.tree_type)
            rescue GeneralError => e
              result.e = e
            rescue NoSuchIdError => nsi
              result.nsi = nsi
            end
            write_result(result, oprot, 'get_trees_rooted_at_doc', seqid)
          end

          def process_get_document_body(seqid, iprot, oprot)
            args = read_args(iprot, Get_document_body_args)
            result = Get_document_body_result.new()
            begin
              result.success = @handler.get_document_body(args.doc_id, args.start, args.offset)
            rescue GeneralError => e
              result.e = e
            rescue NoSuchIdError => nsi
              result.nsi = nsi
            end
            write_result(result, oprot, 'get_document_body', seqid)
          end

          def process_update_document_metadata(seqid, iprot, oprot)
            args = read_args(iprot, Update_document_metadata_args)
            result = Update_document_metadata_result.new()
            begin
              result.success = @handler.update_document_metadata(args.doc_id, args.updates)
            rescue GeneralError => e
              result.e = e
            rescue NoSuchIdError => nsi
              result.nsi = nsi
            end
            write_result(result, oprot, 'update_document_metadata', seqid)
          end

          def process_add_documents(seqid, iprot, oprot)
            args = read_args(iprot, Add_documents_args)
            result = Add_documents_result.new()
            begin
              result.success = @handler.add_documents(args.o)
            rescue GeneralError => e
              result.e = e
            end
            write_result(result, oprot, 'add_documents', seqid)
          end

          def process_attach_as_child(seqid, iprot, oprot)
            args = read_args(iprot, Attach_as_child_args)
            result = Attach_as_child_result.new()
            begin
              @handler.attach_as_child(args.tree_type, args.parent_doc_id, args.child_doc_id)
            rescue GeneralError => e
              result.e = e
            rescue NoSuchIdError => nsi
              result.nsi = nsi
            end
            write_result(result, oprot, 'attach_as_child', seqid)
          end

          def process_detach_as_child(seqid, iprot, oprot)
            args = read_args(iprot, Detach_as_child_args)
            result = Detach_as_child_result.new()
            begin
              @handler.detach_as_child(args.tree_type, args.parent_doc_id, args.child_doc_id)
            rescue GeneralError => e
              result.e = e
            rescue NoSuchIdError => nsi
              result.nsi = nsi
            rescue NotAChildError => nac
              result.nac = nac
            end
            write_result(result, oprot, 'detach_as_child', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class Search_args
          include Thrift::Struct
          Thrift::Struct.field_accessor self, :tree_type, :query, :start, :offset, :params
          FIELDS = {
            1 => {:type => Thrift::Types::STRING, :name => 'tree_type'},
            2 => {:type => Thrift::Types::STRING, :name => 'query'},
            3 => {:type => Thrift::Types::I32, :name => 'start'},
            4 => {:type => Thrift::Types::I32, :name => 'offset'},
            5 => {:type => Thrift::Types::MAP, :name => 'params', :key => {:type => Thrift::Types::STRING}, :value => {:type => Thrift::Types::STRING}}
          }
        end

        class Search_result
          include Thrift::Struct
          Thrift::Struct.field_accessor self, :success, :e
          FIELDS = {
            0 => {:type => Thrift::Types::LIST, :name => 'success', :element => {:type => Thrift::Types::STRUCT, :class => SearchResult}},
            1 => {:type => Thrift::Types::STRUCT, :name => 'e', :class => GeneralError}
          }
        end

        class Search_size_args
          include Thrift::Struct
          Thrift::Struct.field_accessor self, :tree_type, :query, :params
          FIELDS = {
            1 => {:type => Thrift::Types::STRING, :name => 'tree_type'},
            2 => {:type => Thrift::Types::STRING, :name => 'query'},
            3 => {:type => Thrift::Types::MAP, :name => 'params', :key => {:type => Thrift::Types::STRING}, :value => {:type => Thrift::Types::STRING}}
          }
        end

        class Search_size_result
          include Thrift::Struct
          Thrift::Struct.field_accessor self, :success, :e
          FIELDS = {
            0 => {:type => Thrift::Types::I32, :name => 'success'},
            1 => {:type => Thrift::Types::STRUCT, :name => 'e', :class => GeneralError}
          }
        end

        class Get_document_args
          include Thrift::Struct
          Thrift::Struct.field_accessor self, :doc_id
          FIELDS = {
            1 => {:type => Thrift::Types::I32, :name => 'doc_id'}
          }
        end

        class Get_document_result
          include Thrift::Struct
          Thrift::Struct.field_accessor self, :success, :e, :nsi
          FIELDS = {
            0 => {:type => Thrift::Types::STRUCT, :name => 'success', :class => Document},
            1 => {:type => Thrift::Types::STRUCT, :name => 'e', :class => GeneralError},
            2 => {:type => Thrift::Types::STRUCT, :name => 'nsi', :class => NoSuchIdError}
          }
        end

        class Get_tree_args
          include Thrift::Struct
          Thrift::Struct.field_accessor self, :doc_id
          FIELDS = {
            1 => {:type => Thrift::Types::I32, :name => 'doc_id'}
          }
        end

        class Get_tree_result
          include Thrift::Struct
          Thrift::Struct.field_accessor self, :success, :e, :nsi
          FIELDS = {
            0 => {:type => Thrift::Types::STRUCT, :name => 'success', :class => Tree},
            1 => {:type => Thrift::Types::STRUCT, :name => 'e', :class => GeneralError},
            2 => {:type => Thrift::Types::STRUCT, :name => 'nsi', :class => NoSuchIdError}
          }
        end

        class Get_trees_rooted_at_doc_args
          include Thrift::Struct
          Thrift::Struct.field_accessor self, :doc_id, :tree_type
          FIELDS = {
            1 => {:type => Thrift::Types::I32, :name => 'doc_id'},
            2 => {:type => Thrift::Types::STRING, :name => 'tree_type'}
          }
        end

        class Get_trees_rooted_at_doc_result
          include Thrift::Struct
          Thrift::Struct.field_accessor self, :success, :e, :nsi
          FIELDS = {
            0 => {:type => Thrift::Types::LIST, :name => 'success', :element => {:type => Thrift::Types::STRUCT, :class => Tree}},
            1 => {:type => Thrift::Types::STRUCT, :name => 'e', :class => GeneralError},
            2 => {:type => Thrift::Types::STRUCT, :name => 'nsi', :class => NoSuchIdError}
          }
        end

        class Get_document_body_args
          include Thrift::Struct
          Thrift::Struct.field_accessor self, :doc_id, :start, :offset
          FIELDS = {
            1 => {:type => Thrift::Types::I32, :name => 'doc_id'},
            2 => {:type => Thrift::Types::I32, :name => 'start'},
            3 => {:type => Thrift::Types::I32, :name => 'offset'}
          }
        end

        class Get_document_body_result
          include Thrift::Struct
          Thrift::Struct.field_accessor self, :success, :e, :nsi
          FIELDS = {
            0 => {:type => Thrift::Types::STRING, :name => 'success'},
            1 => {:type => Thrift::Types::STRUCT, :name => 'e', :class => GeneralError},
            2 => {:type => Thrift::Types::STRUCT, :name => 'nsi', :class => NoSuchIdError}
          }
        end

        class Update_document_metadata_args
          include Thrift::Struct
          Thrift::Struct.field_accessor self, :doc_id, :updates
          FIELDS = {
            1 => {:type => Thrift::Types::I32, :name => 'doc_id'},
            2 => {:type => Thrift::Types::MAP, :name => 'updates', :key => {:type => Thrift::Types::STRING}, :value => {:type => Thrift::Types::STRING}}
          }
        end

        class Update_document_metadata_result
          include Thrift::Struct
          Thrift::Struct.field_accessor self, :success, :e, :nsi
          FIELDS = {
            0 => {:type => Thrift::Types::STRING, :name => 'success'},
            1 => {:type => Thrift::Types::STRUCT, :name => 'e', :class => GeneralError},
            2 => {:type => Thrift::Types::STRUCT, :name => 'nsi', :class => NoSuchIdError}
          }
        end

        class Add_documents_args
          include Thrift::Struct
          Thrift::Struct.field_accessor self, :o
          FIELDS = {
            1 => {:type => Thrift::Types::LIST, :name => 'o', :element => {:type => Thrift::Types::STRUCT, :class => Document}}
          }
        end

        class Add_documents_result
          include Thrift::Struct
          Thrift::Struct.field_accessor self, :success, :e
          FIELDS = {
            0 => {:type => Thrift::Types::LIST, :name => 'success', :element => {:type => Thrift::Types::STRUCT, :class => AddResult}},
            1 => {:type => Thrift::Types::STRUCT, :name => 'e', :class => GeneralError}
          }
        end

        class Attach_as_child_args
          include Thrift::Struct
          Thrift::Struct.field_accessor self, :tree_type, :parent_doc_id, :child_doc_id
          FIELDS = {
            1 => {:type => Thrift::Types::STRING, :name => 'tree_type'},
            2 => {:type => Thrift::Types::I32, :name => 'parent_doc_id'},
            3 => {:type => Thrift::Types::I32, :name => 'child_doc_id'}
          }
        end

        class Attach_as_child_result
          include Thrift::Struct
          Thrift::Struct.field_accessor self, :e, :nsi
          FIELDS = {
            1 => {:type => Thrift::Types::STRUCT, :name => 'e', :class => GeneralError},
            2 => {:type => Thrift::Types::STRUCT, :name => 'nsi', :class => NoSuchIdError}
          }
        end

        class Detach_as_child_args
          include Thrift::Struct
          Thrift::Struct.field_accessor self, :tree_type, :parent_doc_id, :child_doc_id
          FIELDS = {
            1 => {:type => Thrift::Types::STRING, :name => 'tree_type'},
            2 => {:type => Thrift::Types::I32, :name => 'parent_doc_id'},
            3 => {:type => Thrift::Types::I32, :name => 'child_doc_id'}
          }
        end

        class Detach_as_child_result
          include Thrift::Struct
          Thrift::Struct.field_accessor self, :e, :nsi, :nac
          FIELDS = {
            1 => {:type => Thrift::Types::STRUCT, :name => 'e', :class => GeneralError},
            2 => {:type => Thrift::Types::STRUCT, :name => 'nsi', :class => NoSuchIdError},
            3 => {:type => Thrift::Types::STRUCT, :name => 'nac', :class => NotAChildError}
          }
        end

      end

    end
